import{_ as s,c as e,o as t,a as o}from"./app.24161ae2.js";const y=JSON.parse('{"title":"IDE support","description":"","frontmatter":{},"headers":[{"level":2,"title":"Visual Studio Code","slug":"visual-studio-code"}],"relativePath":"other/ide/index.md"}'),a={name:"other/ide/index.md"},n=o(`<h1 id="ide-support" tabindex="-1">IDE support <a class="header-anchor" href="#ide-support" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you use tag templates to write Strve applications, the following content will help you.</p></div><h2 id="visual-studio-code" tabindex="-1">Visual Studio Code <a class="header-anchor" href="#visual-studio-code" aria-hidden="true">#</a></h2><ul><li>Template string auto-completion tags</li></ul><p>Open <code>settings.json</code> under <strong>Settings</strong> and add the following code:</p><div class="language-json"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">emmet.triggerExpansionOnTab</span><span style="color:#89DDFF;">&quot;</span><span style="color:#EEFFFF;">: </span><span style="color:#89DDFF;">true</span><span style="color:#EEFFFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">emmet.showAbbreviationSuggestions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#EEFFFF;">: </span><span style="color:#89DDFF;">true</span><span style="color:#EEFFFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">emmet.showExpandedAbbreviation</span><span style="color:#89DDFF;">&quot;</span><span style="color:#EEFFFF;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">always</span><span style="color:#89DDFF;">&quot;</span><span style="color:#EEFFFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">emmet.includeLanguages</span><span style="color:#89DDFF;">&quot;</span><span style="color:#EEFFFF;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#EEFFFF;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">html</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Note: If used within <code>&lt;script&gt;</code>, specify <code>type</code>, such as <code>type=&quot;module&quot;; type=&quot;text/javascript&quot;</code>.</p><ul><li>Support HTML template string highlighting</li></ul><p>Download the <a href="https://marketplace.visualstudio.com/items?itemName=Tobermory.es6-string-html" target="_blank" rel="noopener noreferrer">es6-string-html</a> plug-in.</p><ul><li>Convert normal strings to template strings</li></ul><p>Download the <a href="https://marketplace.visualstudio.com/items?itemName=meganrogge.template-string-converter" target="_blank" rel="noopener noreferrer">template-string-converter</a> plug-in, and then enter <code>\${}</code> in a normal string to convert.</p>`,11),l=[n];function p(r,c,i,F,d,u){return t(),e("div",null,l)}var m=s(a,[["render",p]]);export{y as __pageData,m as default};
